/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, EventEmitter, HostBinding, Input, ViewChild, Output, ElementRef, Renderer2, HostListener, ChangeDetectorRef, NgZone, ContentChildren, QueryList } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { DialogActionsComponent } from './dialog-actions.component';
import { DialogTitleBarComponent } from './dialog-titlebar.component';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { hasClasses, Keys, isPresent, focusableSelector, isFocusable, DIALOG_ELEMENTS_HANDLING_ARROWS, DIALOG_ELEMENTS_HANDLING_ESC_KEY, createValueWithUnit } from '../common/util';
import { DialogCloseResult } from './dialog-settings';
import { DIALOG_LOCALIZATION_SERVICE } from './../localization/dialog-localization.service';
import { take } from 'rxjs/operators';
/**
 * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).
 */
let DialogComponent = class DialogComponent {
    constructor(_elRef, _renderer, localization, cdr, zone) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.cdr = cdr;
        this.zone = zone;
        /**
         * Specifies the layout of the action buttons in the Dialog.
         * This option is only applicable if the action buttons are specified through the `actions` options.
         *
         * @default 'stretched'
         */
        this.actionsLayout = 'stretched';
        /**
         * @hidden
         */
        this.titleId = null;
        /**
         * Fires when the user clicks an action button of the Dialog.
         * The event is fired only when the action buttons are specified through the `actions` options.
         */
        this.action = new EventEmitter();
        /**
         * Fires when the user clicks the **Close** button of the Dialog.
         */
        this.close = new EventEmitter();
        this.tabIndex = 0;
        this.subscriptions = [];
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.subscriptions.push(localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr')));
        this.titleId = this.generateTitleId();
    }
    get dir() {
        return this.direction;
    }
    /**
     * @hidden
     */
    onComponentKeydown(event) {
        const target = event.target;
        const parent = target.parentElement;
        if (hasClasses(target, DIALOG_ELEMENTS_HANDLING_ESC_KEY) || hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ESC_KEY)) {
            if (event.keyCode === Keys.esc) {
                this.close.emit(new DialogCloseResult());
            }
        }
        if (hasClasses(target, 'k-button') &&
            hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ARROWS) &&
            (event.keyCode === Keys.left || event.keyCode === Keys.right)) {
            this.handleActionButtonFocus(parent, event.keyCode);
        }
        if (event.keyCode === Keys.tab) {
            this.keepFocusWithinComponent(target, event);
        }
    }
    ngAfterContentInit() {
        this.bubble('close', this.titlebarContent.first);
        if (this.titlebarContent.first) {
            this.titlebarContent.first.id = this.titleId;
        }
        else {
            this.subscriptions.push(this.titlebarContent.changes.subscribe(() => {
                if (isPresent(this.titlebarContent.first)) {
                    this.titlebarContent.first.id = this.titleId;
                    this.zone.onStable.pipe(take(1)).subscribe(() => {
                        this.bubble('close', this.titlebarContent.first);
                        this._renderer.setAttribute(this._elRef.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
                    });
                }
            }));
        }
    }
    ngOnChanges(changes) {
        if (changes.title && changes.title.currentValue && !changes.title.previousValue) {
            this.zone.onStable.pipe(take(1)).subscribe(() => {
                this.bubble('close', this.titlebarView);
                this._renderer.setAttribute(this._elRef.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
            });
        }
    }
    ngAfterViewInit() {
        this.handleInitialFocus();
        this.bubble('close', this.titlebarView);
        this.bubble('action', this.actionsView);
        if (this.titlebarView || this.titlebarContent.first) {
            //Needed for Dialogs created via service
            this._renderer.setAttribute(this._elRef.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
        }
    }
    ngOnInit() {
        this._renderer.removeAttribute(this._elRef.nativeElement, 'title');
        this.cdr.detectChanges();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
        this.subscriptions = [];
    }
    /**
     * Focuses the wrapper of the Dialog component.
     */
    focus() {
        const wrapper = this._elRef.nativeElement;
        if (isPresent(wrapper)) {
            wrapper.focus();
        }
    }
    /**
     * @hidden
     */
    handleInitialFocus() {
        const wrapper = this._elRef.nativeElement;
        const primaryButton = wrapper.querySelector('.k-primary');
        if (this.autoFocusedElement) {
            const initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);
            if (initiallyFocusedElement) {
                initiallyFocusedElement.focus();
            }
        }
        else if (this.shouldFocusPrimary(primaryButton)) {
            primaryButton.focus();
        }
        else {
            wrapper.focus();
        }
    }
    /**
     * @hidden
     */
    handleActionButtonFocus(parent, key) {
        const focusableActionButtons = this.getAllFocusableChildren(parent);
        for (let i = 0; i < focusableActionButtons.length; i++) {
            const current = focusableActionButtons[i];
            if (current === document.activeElement) {
                if (key === Keys.left && i > 0) {
                    focusableActionButtons[i - 1].focus();
                    break;
                }
                if (key === Keys.right && i < focusableActionButtons.length - 1) {
                    focusableActionButtons[i + 1].focus();
                    break;
                }
            }
        }
    }
    /**
     * @hidden
     */
    keepFocusWithinComponent(target, event) {
        const firstFocusable = this._elRef.nativeElement;
        const lastFocusable = this.getLastFocusableElement(firstFocusable);
        const tabBeforeFirstFocusable = target === firstFocusable && event.shiftKey;
        const tabAfterLastFocusable = !event.shiftKey && isPresent(lastFocusable) && target === lastFocusable;
        const tabWithNoFocusable = !isPresent(lastFocusable) && !event.shiftKey;
        if (tabBeforeFirstFocusable || tabWithNoFocusable) {
            event.preventDefault();
            firstFocusable.focus();
        }
        if (tabAfterLastFocusable) {
            event.preventDefault();
            lastFocusable.focus();
        }
    }
    /**
     * @hidden
     */
    shouldFocusPrimary(el) {
        return isPresent(el) && isFocusable(el);
    }
    /**
     * @hidden
     */
    getAllFocusableChildren(parent) {
        return parent.querySelectorAll(focusableSelector);
    }
    /**
     * @hidden
     */
    getLastFocusableElement(parent) {
        const all = this.getAllFocusableChildren(parent);
        return all.length > 0 ? all[all.length - 1] : null;
    }
    /**
     * @hidden
     */
    generateTitleId() {
        return 'kendo-dialog-title-' + Math.ceil(Math.random() * 1000000).toString();
    }
    get wrapperClass() {
        return true;
    }
    get styles() {
        const styles = {};
        if (this.width) {
            styles.width = createValueWithUnit(this.width);
        }
        if (this.height) {
            styles.height = createValueWithUnit(this.height);
        }
        if (this.minWidth) {
            styles.minWidth = createValueWithUnit(this.minWidth);
        }
        if (this.maxWidth) {
            styles.maxWidth = createValueWithUnit(this.maxWidth);
        }
        if (this.minHeight) {
            styles.minHeight = createValueWithUnit(this.minHeight);
        }
        if (this.maxHeight) {
            styles.maxHeight = createValueWithUnit(this.maxHeight);
        }
        return styles;
    }
    bubble(eventName, component) {
        if (component) {
            const emit = e => this[eventName].emit(e);
            const s = component[eventName].subscribe(emit);
            this.subscriptions.push(s);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], DialogComponent.prototype, "actions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DialogComponent.prototype, "actionsLayout", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DialogComponent.prototype, "autoFocusedElement", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DialogComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "width", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "minWidth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "maxWidth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "height", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "minHeight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogComponent.prototype, "maxHeight", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DialogComponent.prototype, "action", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DialogComponent.prototype, "close", void 0);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], DialogComponent.prototype, "dir", null);
tslib_1.__decorate([
    HostBinding('attr.tabIndex'),
    tslib_1.__metadata("design:type", Number)
], DialogComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    ContentChildren(DialogTitleBarComponent, { descendants: false }),
    tslib_1.__metadata("design:type", QueryList)
], DialogComponent.prototype, "titlebarContent", void 0);
tslib_1.__decorate([
    ViewChild(DialogTitleBarComponent, { static: false }),
    tslib_1.__metadata("design:type", DialogTitleBarComponent)
], DialogComponent.prototype, "titlebarView", void 0);
tslib_1.__decorate([
    ViewChild(DialogActionsComponent, { static: false }),
    tslib_1.__metadata("design:type", DialogActionsComponent)
], DialogComponent.prototype, "actionsView", void 0);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], DialogComponent.prototype, "onComponentKeydown", null);
tslib_1.__decorate([
    HostBinding('class.k-dialog-wrapper'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DialogComponent.prototype, "wrapperClass", null);
DialogComponent = tslib_1.__decorate([
    Component({
        animations: [
            trigger('overlayAppear', [
                state('in', style({ opacity: 1 })),
                transition('void => *', [style({ opacity: 0.1 }), animate('.3s cubic-bezier(.2, .6, .4, 1)')])
            ]),
            trigger('dialogSlideInAppear', [
                state('in', style({ transform: 'translate(0, 0)' })),
                transition('void => *', [style({ transform: 'translate(0, -10%)' }), animate('.3s cubic-bezier(.2, 1, .2, 1)')])
            ])
        ],
        exportAs: 'kendoDialog',
        providers: [
            LocalizationService,
            {
                provide: DIALOG_LOCALIZATION_SERVICE,
                useExisting: LocalizationService
            },
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dialog'
            }
        ],
        selector: 'kendo-dialog',
        template: `
        <ng-container
            kendoDialogLocalizedMessages
            i18n-closeTitle="kendo.dialog.closeTitle|The title of the close button"
            closeTitle="Close"
        >
        <div class="k-overlay" @overlayAppear></div>

        <div class="k-widget k-window k-dialog" role="dialog" [ngStyle]="styles" @dialogSlideInAppear>
            <kendo-dialog-titlebar *ngIf="title" [closeTitle]="closeTitle" [id]="titleId">{{ title }}</kendo-dialog-titlebar>
            <ng-content select="kendo-dialog-titlebar" *ngIf="!title"></ng-content>

            <div class="k-content k-window-content k-dialog-content">
                <ng-content *ngIf="!contentTemplate"></ng-content>
                <ng-template [ngTemplateOutlet]="contentTemplate" *ngIf="contentTemplate"></ng-template>
            </div>

            <ng-content select="kendo-dialog-actions" *ngIf="!actions"></ng-content>
            <kendo-dialog-actions *ngIf="actions" [actions]="actions" [layout]="actionsLayout"> </kendo-dialog-actions>
        </div>
    </ng-container>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        LocalizationService,
        ChangeDetectorRef,
        NgZone])
], DialogComponent);
export { DialogComponent };
